(* Booleans are implemented like in System F.
*)
let module Bool = struct(bool)
  type t = forall(x : sig type t end) x.t -> x.t -> x.t

  let true : bool.t =
    fun(typ : sig type t end,
        if_true : typ.t,
        if_false : typ.t
       ) ->
      if_true

  let false : bool.t =
    fun(typ : sig type t end,
        if_true : typ.t,
        if_false : typ.t
       ) ->
      if_false

  (*
  let not' : bool.t -> bool.t = fun(x : bool.t, typ : sig type t end, t : typ.t, f : typ.t) ->
    x typ f t
  *)

  let not = fun(x : bool.t) ->
    x bool bool.false bool.true

  let and_ =
    fun(x : bool.t, y : bool.t) ->
      x bool y bool.false

  let or =
    fun(x : bool.t, y : bool.t) ->
      x bool bool.true y

end;;
