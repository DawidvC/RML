let module A = struct
  type t = Any
end;;

let module N = struct
  type t = Nothing
end;;

let module NA = struct
  type t = Nothing -> Any
end;;

let module AA = struct
  type t = Any -> Nothing
end;;

let list_a = List A;;
let list_n = List N;;

(*
  The subtyping algorithm produces a stack overflow because the question is
  cyclic: the question `list_a.t <: list_n.t` will appear in the question
  `list_a.t.tail |: list_n.t.tail`
list_a.t <: list_n.t [@show_derivation_tree, no_context];;
*)

List N !<: List A [@show_derivation_tree, no_context];;

let nothing_any_list = List NA;;
let any_any_list = List AA;;

any_any_list !<: nothing_any_list [@show_derivation_tree, no_context];;
